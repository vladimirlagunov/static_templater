use template_ast::*;

#[pub]
template_parser -> TemplateAST
    = e:element*
{
    TemplateAST{children: e}
}


element -> TemplateExpr
    = show
    / text


show -> TemplateExpr
    = show_variable_start
      " "*
      e:rust_expr
      " "*
      show_variable_end
{
    TemplateExpr::Show(e)
}


text -> TemplateExpr
    = (!show_variable_start !command_start .)+
{
    TemplateExpr::Text(match_str.to_string())
}


show_variable_start = "{{"
show_variable_end = "}}"
command_start = "{%"
command_end = "%}"


rust_expr -> RustExpr
    = rust_expr__value_ident
    / rust_expr__get_attribute


rust_expr__value_ident -> RustExpr
    = identifier ![.([]
{
    RustExpr::Value(RustExprValue::Ident(match_str.to_string()))
}


rust_expr__get_attribute -> RustExpr
    = path:(identifier ++ ".")
{
    path.iter().skip(1).fold(
        RustExpr::Value(RustExprValue::Ident(path.get(0).unwrap().to_string())),
        |expr, attr| RustExpr::GetAttribute(box expr, attr.to_string()))
}


identifier -> &'input str
    = [A-Za-z_][A-Za-z0-9_]*
{
    match_str
}
