use template_ast::*;

#[pub]
template_parser -> TemplateAST
    = e:element*
{
    TemplateAST{children: e}
}


element -> TemplateExpr
    = show
    / text


show -> TemplateExpr
    = show_variable_start
      " "*
      e:rust_expr
      " "*
      show_variable_end
{
    TemplateExpr::Show(e)
}


text -> TemplateExpr
    = (!show_variable_start !command_start .)+
{
    TemplateExpr::Text(match_str.to_string())
}


show_variable_start = "{{"
show_variable_end = "}}"
command_start = "{%"
command_end = "%}"


rust_expr -> Box<RustExpr>
    = exprs:(rust_expr__ident_with_item ++ ".")
{
    let start: Box<RustExpr> = exprs.get(0).unwrap().clone();
    exprs.iter().skip(1).fold(
        start, |expr: Box<RustExpr>, new_expr: &Box<RustExpr>| 
            expr.concat_as_get_attribute(new_expr.clone()).ok().unwrap())
}

rust_expr__ident_with_item -> Box<RustExpr>
    = ident:identifier getters:rust_expr__one_get_item*
{
    let mut result: Box<RustExpr> = Box::new(RustExpr::Value(
        RustExprValue::Ident(ident.to_string())));
    for value in getters.into_iter() {
        result = Box::new(RustExpr::GetItem(result, value));
    }
    result
}


rust_expr__one_get_item -> RustExprValue
    = "[" value:(rust_expr__value_ident 
                / rust_expr__value_string
                / rust_expr__value_int) "]"
{
    value
}


rust_expr__value_ident -> RustExprValue
    = identifier ![.([]
{
    RustExprValue::Ident(match_str.to_string())
}


rust_expr__value_string -> RustExprValue
    = ["] ([^"\\] / ([\\]["n\\]))* ["]
{
    RustExprValue::StringLiteral(match_str.slice(1, match_str.len() - 1).to_string())
}


rust_expr__value_int -> RustExprValue
    = [-+]?[0-9]+
{
    RustExprValue::IntLiteral(match_str.parse().unwrap())
}


identifier -> &'input str
    = [A-Za-z_][A-Za-z0-9_]*
{
    match_str
}
