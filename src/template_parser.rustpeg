use template_ast::*;

#[pub]
template_parser -> TemplateAST
    = e:element*
{
    TemplateAST{children: e}
}


element -> TemplateExpr
    = show
    / text


show -> TemplateExpr
    = show_variable_start
      " "*
      e:rust_expr
      " "*
      show_variable_end
{
    TemplateExpr::Show(e)
}


text -> TemplateExpr
    = (!show_variable_start !command_start .)+
{
    TemplateExpr::Text(match_str.into_string())
}


show_variable_start = "{{"
show_variable_end = "}}"
command_start = "{%"
command_end = "%}"


// rust_expr -> RustExpr
    // = rust_expr__value__ident
    // / rust_expr__get_attribute
    // / rust_expr__value__string_literal
    // / rust_expr__value__int_literal
    // / rust_expr__value__float_literal
    // / rust_expr__value__bool_literal
    // / rust_expr__call


rust_expr -> RustExpr
    = rust_expr__value_ident
    / rust_expr__get_attribute


rust_expr__value_ident -> RustExpr
    = identifier ![.(]
{
    RustExpr::Value(RustExprValue::Ident(match_str.to_string()))
}


rust_expr__get_attribute -> RustExpr
    = path:(identifier ++ ".")
{
    path.iter().skip(1).fold(
        RustExpr::Value(RustExprValue::Ident(path.get(0).unwrap().into_string())),
        |expr, attr| RustExpr::GetAttribute(box expr, attr.into_string()))
}


// rust_expr__value__ident -> RustExpr
//     = identifier
// {
//     println!("Matched rust_expr__value__ident: {}", match_str);
//     RustExpr::Value(RustExprValue::Ident(match_str.to_string()))
// }


// rust_expr__get_attribute -> RustExpr
//     = source:rust_expr "." attr:identifier
// {
//     println!("Matched rust_expr__get_attribute: str: {}, source: {}, attr: {}", match_str, source, attr);
//     RustExpr::GetAttribute(box source, attr.into_string())
// }


identifier -> &'input str
    = [A-Za-z_][A-Za-z0-9_]*
{
    match_str
}


// rust_expr__value__string_literal -> RustExpr
//     = ["] ([^"] / "\\\"")* ["]
// {
//     RustExpr::Value(RustExprValue::StringLiteral(match_str.into_string()))
// }


// rust_expr__value__int_literal -> RustExpr
//     = [-+]? [0-9]+
// {
//     RustExpr::Value(RustExprValue::IntLiteral(match_str.parse().unwrap()))
// }


// rust_expr__value__float_literal -> RustExpr
//     = [-+]? [0-9]+ "." [0-9]+ ([eE] [-+]? [0-9]+)?
// {
//     RustExpr::Value(RustExprValue::FloatLiteral(match_str.parse().unwrap()))
// }


// rust_expr__value__bool_literal -> RustExpr
//     = ("false" / "true")
// {
//     RustExpr::Value(RustExprValue::BoolLiteral(match_str == "true"))
// }


// rust_expr__call -> RustExpr
//     = callable:rust_expr [(] args:((rust_expr [,])* rust_expr?) [)]
// {
//     RustExpr::Call(box callable, args.iter().map(
//         |e: &RustExpr| box e.clone()).collect::<Vec<_>>())
// }
